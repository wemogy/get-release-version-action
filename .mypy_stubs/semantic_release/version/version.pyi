from _typeshed import Incomplete
import logging
from typing import Callable

from semantic_release.const import SEMVER_REGEX as SEMVER_REGEX
from semantic_release.enums import LevelBump as LevelBump
from semantic_release.errors import InvalidVersion as InvalidVersion
from semantic_release.helpers import check_tag_format as check_tag_format

log: logging.Logger
VersionComparable = "Version" | str
VersionComparator = Callable[["Version", "Version"], bool]

class Version:
    major: int
    minor: int
    patch: int
    prerelease_token: str
    prerelease_revision: int | None
    build_metadata: str
    def __init__(self, major: int, minor: int, patch: int, *, prerelease_token: str = 'rc', prerelease_revision: int | None = None, build_metadata: str = '', tag_format: str = 'v{version}') -> None: ...
    @property
    def tag_format(self) -> str: ...
    @tag_format.setter
    def tag_format(self, new_format: str) -> None: ...
    @classmethod
    def parse(cls, version_str: str, tag_format: str = 'v{version}', prerelease_token: str = 'rc') -> Version: ...
    @property
    def is_prerelease(self) -> bool: ...
    def as_tag(self) -> str: ...
    def as_semver_tag(self) -> str: ...
    def bump(self, level: LevelBump) -> Version: ...
    __add__ = bump
    def __hash__(self) -> int: ...
    def __eq__(self, other: Version) -> bool: ...  # type: ignore[override]
    def __neq__(self, other: Version) -> bool: ...
    def __gt__(self, other: Version) -> bool: ...
    def __ge__(self, other: Version) -> bool: ...
    def __lt__(self, other: Version) -> bool: ...
    def __le__(self, other: Version) -> bool: ...
    def __sub__(self, other: Version) -> LevelBump: ...
    def to_prerelease(self, token: str | None = None, revision: int | None = None) -> Version: ...
    def finalize_version(self) -> Version: ...
